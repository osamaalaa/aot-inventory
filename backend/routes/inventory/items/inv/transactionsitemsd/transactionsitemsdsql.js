let statements = {
    getAlltransactionsItemsD : {
        statement :`
      SELECT INV_TRANSACTIONS_ITEMS_D_ID,
             INV_TRANSACTIONS_ITEMS_ID,
             INV_TRANSACTIONS_ID,
             ARRANGEMENT_NO,
             BATCH_NUMBER,
             EXPIRY_DATE,
             SERIAL_NUMBER,
             UNIT_QUANTITY,
             DEFAULT_UNIT_QUANTITY,
             BASE_UNIT_QUANTITY,
             CALC_TYPE,
             ITEM_COST,
             TOTAL_COST,
             CURRENT_BALANCE,
             QTY_ON_HAND,
             QTY_RESERVED,
             QTY_TRANSFER_TO,
             QTY_TRANSFER_FROM,
             OTY_DISPOSED,
             QTY_ON_POR,
             QTY_ON_SOR,
             QTY_ON_SO,
             QTY_ON_PO,
             QTY_REQUESTED,
             QTY_SO_CONSIGMENT,
             QTY_PO_CONSIGMENT,
             CREATED_BY,
             CREATION_DATE,
             DELETED,
             DELETED_BY,
             DELETED_DATE,
             MODIFIED_BY,
             MODIFIED_DATE
        FROM INV_TRANSACTIONS_ITEMS_D
        WHERE DELETED = 0`,
              bindings: [],
              qstring: "",
              requireCommit: false
          },

    getOnetransactionsItemsD : {
        statement :` SELECT
        INV_TRANSACTIONS_ITEMS_D_ID,
        INV_TRANSACTIONS_ITEMS_ID,
        INV_TRANSACTIONS_ID,
        ARRANGEMENT_NO,
        BATCH_NUMBER,
        EXPIRY_DATE,
        SERIAL_NUMBER,
        UNIT_QUANTITY,
        DEFAULT_UNIT_QUANTITY,
        BASE_UNIT_QUANTITY,
        CALC_TYPE,
        ITEM_COST,
        TOTAL_COST,
        CURRENT_BALANCE,
        QTY_ON_HAND,
        QTY_RESERVED,
        QTY_TRANSFER_TO,
        QTY_TRANSFER_FROM,
        OTY_DISPOSED,
        QTY_ON_POR,
        QTY_ON_SOR,
        QTY_ON_SO,
        QTY_ON_PO,
        QTY_REQUESTED,
        QTY_SO_CONSIGMENT,
        QTY_PO_CONSIGMENT,
        CREATED_BY,
        CREATION_DATE,
        DELETED,
        DELETED_BY,
        DELETED_DATE,
        MODIFIED_BY,
        MODIFIED_DATE
   FROM INV_TRANSACTIONS_ITEMS_D
   WHERE INV_TRANSACTIONS_ITEMS_D_ID = :INV_TRANSACTIONS_ITEMS_D_ID  AND DELETED = 0`,
        bindings: [],
        qstring: "",
        requireCommit: false
    },

     inserttransactionsItemsD : {
        statement :`INSERT INTO INV_TRANSACTIONS_ITEMS_D (
            INV_TRANSACTIONS_ITEMS_D_ID,
            INV_TRANSACTIONS_ITEMS_ID,
            INV_TRANSACTIONS_ID,
            ARRANGEMENT_NO,
            BATCH_NUMBER,
            EXPIRY_DATE,
            SERIAL_NUMBER,
            UNIT_QUANTITY,
            DEFAULT_UNIT_QUANTITY,
            BASE_UNIT_QUANTITY,
            CALC_TYPE,
            ITEM_COST,
            TOTAL_COST,
            CURRENT_BALANCE,
            QTY_ON_HAND,
            QTY_RESERVED,
            QTY_TRANSFER_TO,
            QTY_TRANSFER_FROM,
            OTY_DISPOSED,
            QTY_ON_POR,
            QTY_ON_SOR,
            QTY_ON_SO,
            QTY_ON_PO,
            QTY_REQUESTED,
            QTY_SO_CONSIGMENT,
            QTY_PO_CONSIGMENT,
            CREATED_BY,
            CREATION_DATE
     )VALUES (
        INV_TRANSACTIONS_ITEMS_D_SEQ.NEXTVAL,
        :INV_TRANSACTIONS_ITEMS_ID,
        :INV_TRANSACTIONS_ID,
        :ARRANGEMENT_NO,
        :BATCH_NUMBER,
        sysdate,
        :SERIAL_NUMBER,
        :UNIT_QUANTITY,
        :DEFAULT_UNIT_QUANTITY,
        :BASE_UNIT_QUANTITY,
        :CALC_TYPE,
        :ITEM_COST,
        :TOTAL_COST,
        :CURRENT_BALANCE,
        :QTY_ON_HAND,
        :QTY_RESERVED,
        :QTY_TRANSFER_TO,
        :QTY_TRANSFER_FROM,
        :OTY_DISPOSED,
        :QTY_ON_POR,
        :QTY_ON_SOR,
        :QTY_ON_SO,
        :QTY_ON_PO,
        :QTY_REQUESTED,
        :QTY_SO_CONSIGMENT,
        :QTY_PO_CONSIGMENT,
        :CREATED_BY,
        sysdate
    )
     RETURN INV_TRANSACTIONS_ITEMS_ID into :R_INV_TRANSACTIONS_ITEMS_ID `,
        returns :["R_INV_TRANSACTIONS_ITEMS_ID"],
        bindings: [],
        qstring: "",
        requireCommit: true
     }
 }
 module.exports = statements ;
