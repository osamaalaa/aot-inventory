let statements = {
  getAllItemBalance: {
    statement: `SELECT
          items_balance_id,
          SUBSIDIARY_ID,
          (SELECT AR_NAME  FROM AOT_GEN.SUBSIDARIES S WHERE S.SUBSIDIARY_ID = I.SUBSIDIARY_ID) SUBSIDIARY_AR_NAME,
          (SELECT EN_NAME  FROM AOT_GEN.SUBSIDARIES S WHERE S.SUBSIDIARY_ID = I.SUBSIDIARY_ID) SUBSIDIARY_EN_NAME,
          items_id,
          (SELECT AR_NAME  FROM INVENTORY.ITEMS M WHERE M.ITEMS_ID = I.ITEMS_ID) ITEM_AR_NAME,
          (SELECT EN_NAME  FROM INVENTORY.ITEMS M WHERE M.ITEMS_ID = I.ITEMS_ID) ITEM_EN_NAME,
          (SELECT ITEM_CODE  FROM INVENTORY.ITEMS M WHERE M.ITEMS_ID = I.ITEMS_ID) ITEM_CODE,
          stores_id,
          (SELECT AR_NAME FROM INVENTORY.STORES S WHERE S.STORES_ID = I.STORES_ID) STORE_AR_NAME ,
          (SELECT EN_NAME FROM INVENTORY.STORES S WHERE S.STORES_ID = I.STORES_ID) STORE_EN_NAME ,
          open_balance,
          item_cost,
          average_cost,
          current_balance,
          qty_on_hand,
          qty_reserved,
          qty_transfer_to,
          qty_transfer_from,
          oty_disposed,
          qty_on_por,
          qty_on_sor,
          qty_on_so,
          qty_on_po,
          qty_requested,
          qty_so_consigment,
          qty_po_consigment,
          qty_in,
          qty_out,
          reorder_limit,
          max_limit,
          min_limit,
          last_sold,
          last_recieved,
          confirmed,
          stores_locations_id,
          (SELECT AR_NAME  FROM INVENTORY.STORES_LOCATIONS SL WHERE SL.STORES_LOCATIONS_ID = I.STORES_LOCATIONS_ID) STORE_LOCATION_AR_NAME,
          (SELECT EN_NAME  FROM INVENTORY.STORES_LOCATIONS SL WHERE SL.STORES_LOCATIONS_ID = I.STORES_LOCATIONS_ID) STORE_LOCATION_EN_NAME,
          created_by,
          creation_date,
          deleted,
          deleted_by,
          deleted_date
          FROM
          ITEMS_BALANCE I
          WHERE DELETED = 0
            `,
    returns: [],
    bindings: [],
    qstring: "",
    requireCommit: false
  },
  insertNewItemBalance: {
    statement: `INSERT INTO ITEMS_BALANCE (
              ITEMS_BALANCE_ID,
              SUBSIDIARY_ID,
              ITEMS_ID,
              STORES_ID,
              OPEN_BALANCE,
              ITEM_COST,
              AVERAGE_COST,
              CURRENT_BALANCE,
              QTY_ON_HAND,
              QTY_RESERVED,
              QTY_TRANSFER_TO,
              QTY_TRANSFER_FROM,
              OTY_DISPOSED,
              QTY_ON_POR,
              QTY_ON_SOR,
              QTY_ON_SO,
              QTY_ON_PO,
              QTY_REQUESTED,
              QTY_SO_CONSIGMENT,
              QTY_PO_CONSIGMENT,
              QTY_IN,
              QTY_OUT,
              REORDER_LIMIT,
              MAX_LIMIT,
              MIN_LIMIT,
              CONFIRMED,
              STORES_LOCATIONS_ID
              ) VALUES (
              ITEMS_BALANCE_SEQ.NEXTVAL,
              :SUBSIDIARY_ID,
              :ITEMS_ID,
              :STORES_ID,
              :OPEN_BALANCE,
              :ITEM_COST,
              :AVERAGE_COST,
              :CURRENT_BALANCE,
              :QTY_ON_HAND,
              :QTY_RESERVED,
              :QTY_TRANSFER_TO,
              :QTY_TRANSFER_FROM,
              :OTY_DISPOSED,
              :QTY_ON_POR,
              :QTY_ON_SOR,
              :QTY_ON_SO,
              :QTY_ON_PO,
              :QTY_REQUESTED,
              :QTY_SO_CONSIGMENT,
              :QTY_PO_CONSIGMENT,
              :QTY_IN,
              :QTY_OUT,
              :REORDER_LIMIT,
              :MAX_LIMIT,
              :MIN_LIMIT,
              :CONFIRMED,
              :STORES_LOCATIONS_ID
              )
              RETURN items_id INTO :I_ITEM_ID `,
    returns: ["I_ITEM_ID"],
    bindings: [],
    qstring: "",
    requireCommit: true
  },
  getOneItemBalance: {
    statement: `SELECT
                    items_balance_id,
                    SUBSIDIARY_ID,
                    (SELECT AR_NAME  FROM AOT_GEN.SUBSIDARIES S WHERE S.SUBSIDIARY_ID = I.SUBSIDIARY_ID) SUBSIDARIE_AR_NAME,
                    (SELECT EN_NAME  FROM AOT_GEN.SUBSIDARIES S WHERE S.SUBSIDIARY_ID = I.SUBSIDIARY_ID) SUBSIDARIE_EN_NAME,
                    items_id,
                    (SELECT AR_NAME  FROM INVENTORY.ITEMS M WHERE M.ITEMS_ID = I.ITEMS_ID) ITEM_AR_NAME,
                    (SELECT EN_NAME  FROM INVENTORY.ITEMS M WHERE M.ITEMS_ID = I.ITEMS_ID) ITEM_EN_NNAME,
                    stores_id,
                    (SELECT AR_NAME FROM INVENTORY.STORES S WHERE S.STORES_ID = I.STORES_ID) STORE_AR_NAME ,
                    (SELECT EN_NAME FROM INVENTORY.STORES S WHERE S.STORES_ID = I.STORES_ID) STORE_EN_NAME ,
                    open_balance,
                    item_cost,
                    average_cost,
                    current_balance,
                    qty_on_hand,
                    qty_reserved,
                    qty_transfer_to,
                    qty_transfer_from,
                    oty_disposed,
                    qty_on_por,
                    qty_on_sor,
                    qty_on_so,
                    qty_on_po,
                    qty_requested,
                    qty_so_consigment,
                    qty_po_consigment,
                    qty_in,
                    qty_out,
                    reorder_limit,
                    max_limit,
                    min_limit,
                    last_sold,
                    last_recieved,
                    confirmed,
                    stores_locations_id,
                    created_by,
                    creation_date,
                    deleted,
                    deleted_by,
                    deleted_date
                    FROM
                    ITEMS_BALANCE I
                    WHERE items_balance_id= :ITEMS_BALANCE_ID AND DELETED = 0 `,

    bindings: [],
    qstring: "",
    requireCommit: false
  },
  deleteItemBalance: {
    statement: `UPDATE ITEMS_BALANCE
                            SET deleted = 1 , deleted_date = SYSDATE
                            WHERE
                                ITEMS_BALANCE_ID = :ITEMS_BALANCE_ID`,
    returns: [],
    bindings: [],
    qstring: "",
    requireCommit: true
  }
}

module.exports = statements;
